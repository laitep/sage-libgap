###############################################################################
# This file was automatically generated by extract_sage_libgap.py. DO NOT EDIT!
###############################################################################
#
#     Copyright (C) 2024 LaiTeP and contributors
#
#     This file is part of the sage_libgap distribution.
#     It is an automatically modified version of a file in the "Sage: a free
#     open-source mathematics software system" software package. Further
#     licensing information may be available further down this file.
#
#     The sage_libgap package is free software; you can redistribute it and/or
#     modify it under the terms of the GNU General Public License as published
#     by the Free Software Foundation, either version 3 of the License, or (at
#     your option) any later version.
#
#     The sage_libgap package is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
#     Public License for more details.
#
#     You should have received a copy of the GNU General Public License along
#     with sage_libgap package. If not, see <https://www.gnu.org/licenses/>.
#
###############################################################################

#*****************************************************************************
#       Copyright (C) 2012 Volker Braun <vbraun.name@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#                  http://www.gnu.org/licenses/
#*****************************************************************************

from sage_libgap.gap_includes cimport Obj

############################################################################
### Hooking into the GAP memory management #################################
############################################################################

cdef class ObjWrapper():
    cdef Obj value

cdef ObjWrapper wrap_obj(Obj obj) noexcept

# returns the refcount dictionary for debugging purposes
cpdef get_owned_objects() noexcept

# Reference count GAP objects that you want to prevent from being
# garbage collected
cdef void reference_obj(Obj obj) noexcept
cdef void dereference_obj(Obj obj) noexcept

# callback from the GAP memory manager so we can mark all_gap_elements.values()
cdef void gasman_callback() noexcept with gil


############################################################################
### Initialization of GAP ##################################################
############################################################################

cdef initialize() noexcept


############################################################################
### Evaluate string in GAP #################################################
############################################################################

# Evaluate a string
cdef Obj gap_eval(str gap_string) except? NULL
