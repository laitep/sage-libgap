/******************************************************************************
# This file was automatically generated by extract_sage_libgap.py. DO NOT EDIT!
*******************************************************************************
#
#     Copyright (C) 2024 LaiTeP and contributors
#
#     This file is part of the sage_libgap distribution.
#     It is an automatically modified version of a file in the "Sage: a free
#     open-source mathematics software system" software package. Further
#     licensing information may be available further down this file.
#
#     The sage_libgap package is free software; you can redistribute it and/or
#     modify it under the terms of the GNU General Public License as published
#     by the Free Software Foundation, either version 3 of the License, or (at
#     your option) any later version.
#
#     The sage_libgap package is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
#     Public License for more details.
#
#     You should have received a copy of the GNU General Public License along
#     with sage_libgap package. If not, see <https://www.gnu.org/licenses/>.
#
******************************************************************************/

/*****************************************************************************
#       Copyright (C) 2017 Erik M. Bray <erik.bray@lri.fr>
#       Copyright (C) 2018 Jeroen Demeyer <J.Demeyer@UGent.be>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#                  http://www.gnu.org/licenses/
*****************************************************************************/

#include <Python.h>
#include <string.h>


static inline PyObject* _cstr_to_str(const char* c, PyObject* encoding, PyObject* errors)
{
    const char* err = NULL;  // Default: strict
    const char* enc = NULL;  // Default: utf-8

    if (errors != Py_None) {
        err = PyUnicode_AsUTF8(errors);
        if (!err) return NULL;
    }

    if (encoding != Py_None) {
        enc = PyUnicode_AsUTF8(encoding);
        if (!enc) return NULL;
    }

    return PyUnicode_Decode(c, strlen(c), enc, err);
}


static inline PyObject* _str_to_bytes(PyObject* s, PyObject* encoding, PyObject* errors)
{
    if (!PyUnicode_Check(s)) {
        PyErr_Format(PyExc_TypeError,
                     "expected str, %s found",
                     Py_TYPE(s)->tp_name);
        return NULL;
    }

    const char* err = NULL;  // Default: strict
    const char* enc = NULL;  // Default: utf-8

    if (errors != Py_None) {
        err = PyUnicode_AsUTF8(errors);
        if (!err) return NULL;
    }

    if (encoding != Py_None) {
        enc = PyUnicode_AsUTF8(encoding);
        if (!enc) return NULL;
    }

    return PyUnicode_AsEncodedString(s, enc, err);
}
