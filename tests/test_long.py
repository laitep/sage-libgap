###############################################################################
# This file was automatically generated by extract_sage_libgap.py. DO NOT EDIT!
###############################################################################
#
#     Copyright (C) 2024 LaiTeP and contributors
#
#     This file is part of the sage_libgap distribution.
#     It is an automatically modified version of a file in the "Sage: a free
#     open-source mathematics software system" software package. Further
#     licensing information may be available further down this file.
#
#     The sage_libgap package is free software; you can redistribute it and/or
#     modify it under the terms of the GNU General Public License as published
#     by the Free Software Foundation, either version 3 of the License, or (at
#     your option) any later version.
#
#     The sage_libgap package is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
#     Public License for more details.
#
#     You should have received a copy of the GNU General Public License along
#     with sage_libgap package. If not, see <https://www.gnu.org/licenses/>.
#
###############################################################################

"""
Long tests for GAP

These stress test the garbage collection inside GAP
"""
from sage_libgap.libgap import libgap


def test_loop_1():
    """
    EXAMPLES::

        sage: from sage_libgap.test_long import test_loop_1
        sage: test_loop_1()  # long time (up to 25s on sage.math, 2013)
    """
    libgap.collect()
    for i in range(10000):
        G = libgap.CyclicGroup(2)


def test_loop_2():
    """
    EXAMPLES::

        sage: from sage_libgap.test_long import test_loop_2
        sage: test_loop_2()  # long time (10s on sage.math, 2013)
    """
    G = libgap.FreeGroup(2)
    a, b = G.GeneratorsOfGroup()
    for i in range(100):
        rel = libgap([a**2, b**2, a*b*a*b])
        H = G / rel
        H1 = H.GeneratorsOfGroup()[0]
        n = H1.Order()
        assert n.sage() == 2

    for i in range(300000):
        n = libgap.Order(H1)


def test_loop_3():
    """
    EXAMPLES::

        sage: from sage_libgap.test_long import test_loop_3
        sage: test_loop_3()  # long time (31s on sage.math, 2013)
    """
    G = libgap.FreeGroup(2)
    a, b = G.GeneratorsOfGroup()
    for i in range(300000):
        lis = libgap([])
        lis.Add(a ** 2)
        lis.Add(b ** 2)
        lis.Add(b * a)
